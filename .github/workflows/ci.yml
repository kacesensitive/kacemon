name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce matrix size
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install protobuf

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install protoc

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests (default features)
        run: cargo test --verbose

      - name: Run tests (all features)
        run: cargo test --verbose --all-features

      - name: Run tests (Linux procfs feature)
        if: runner.os == 'Linux'
        run: cargo test --verbose --features linux_procfs

      - name: Run tests (WebSocket exporter)
        run: cargo test --verbose --features exporter_ws

      - name: Run tests (gRPC exporter)
        run: cargo test --verbose --features exporter_grpc

      - name: Build release
        run: cargo build --release --verbose

      - name: Build with all features
        run: cargo build --release --verbose --all-features

  cross-compile:
    name: Cross Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cross compile
        run: cross build --target ${{ matrix.target }} --release

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Install protobuf compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Run coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: cobertura.xml
          fail_ci_if_error: true
